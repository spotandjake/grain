module JsonTest

include "json"
include "result"
include "buffer"
from Json use *
// Source: http://www.json.org/JSON_checker/
// Source: https://github.com/maciejhirsz/json-rust/blob/master/tests/number.rs
module Validation {
  // Valid
  assert Result.isOk(
    parse(
      "[\r\n    \"JSON Test Pattern pass1\",\r\n    {\"object with 1 member\":[\"array with 1 element\"]},\r\n    {},\r\n    [],\r\n    -42,\r\n    true,\r\n    false,\r\n    null,\r\n    {\r\n        \"integer\": 1234567890,\r\n        \"real\": -9876.543210,\r\n        \"e\": 0.123456789e-12,\r\n        \"E\": 1.234567890E+34,\r\n        \"\":  23456789012E66,\r\n        \"zero\": 0,\r\n        \"one\": 1,\r\n        \"space\": \" \",\r\n        \"quote\": \"\\\"\",\r\n        \"backslash\": \"\\\\\",\r\n        \"controls\": \"\\b\\f\\n\\r\\t\",\r\n        \"slash\": \"\/ & \\\/\",\r\n        \"alpha\": \"abcdefghijklmnopqrstuvwyz\",\r\n        \"ALPHA\": \"ABCDEFGHIJKLMNOPQRSTUVWYZ\",\r\n        \"digit\": \"0123456789\",\r\n        \"0123456789\": \"digit\",\r\n        \"special\": \"`1~!@#$%^&*()_+-={':[,]}|;.<\/>?\",\r\n        \"hex\": \"\\u0123\\u4567\\u89AB\\uCDEF\\uabcd\\uef4A\",\r\n        \"true\": true,\r\n        \"false\": false,\r\n        \"null\": null,\r\n        \"array\":[  ],\r\n        \"object\":{  },\r\n        \"address\": \"50 St. James Street\",\r\n        \"url\": \"http:\/\/www.JSON.org\/\",\r\n        \"comment\": \"\/\/ \/* <!-- --\",\r\n        \"# -- --> *\/\": \" \",\r\n        \" s p a c e d \" :[1,2 , 3\r\n\r\n,\r\n\r\n4 , 5        ,          6           ,7        ],\"compact\":[1,2,3,4,5,6,7],\r\n        \"jsontext\": \"{\\\"object with 1 member\\\":[\\\"array with 1 element\\\"]}\",\r\n        \"quotes\": \"&#34; \\u0022 %22 0x22 034 &#x22;\",\r\n        \"\\\/\\\\\\\"\\uCAFE\\uBABE\\uAB98\\uFCDE\\ubcda\\uef4A\\b\\f\\n\\r\\t`1~!@#$%^&*()_+-=[]{}|;:',.\/<>?\"\r\n: \"A key can be any string\"\r\n    },\r\n    0.5 ,98.6\r\n,\r\n99.44\r\n,\r\n\r\n1066,\r\n1e1,\r\n0.1e1,\r\n1e-1,\r\n1e00,2e+00,2e-00\r\n,\"rosebud\"]"
    )
  )
  assert Result.isOk(
    parse(
      "{
    \"JSON Test Pattern pass3\": {
        \"The outermost value\": \"must be an object or array.\",
        \"In this test\": \"It is an object.\"
    }
  }"
    )
  )
  let depth = 256
  let text = Buffer.make(2052)
  for (let mut i = 0; i < depth; i += 1) {
    Buffer.addString("[{\"a\":", text)
  }
  Buffer.addString("null", text)
  for (let mut i = 0; i < depth; i += 1) {
    Buffer.addString("}]", text)
  }
  assert Result.isOk(parse(Buffer.toString(text)))
  let text = Buffer.make(101)
  Buffer.addString("8", text)
  for (let mut i = 0; i < 100; i += 1) {
    Buffer.addString("0", text)
  }
  assert Result.isOk(parse(Buffer.toString(text)))
  // Invalid
  assert Result.isErr(parse("[\"Unclosed array\""))
  assert Result.isErr(parse("{unquoted_key: \"keys must be quoted\"}"))
  assert Result.isErr(parse("[\"extra comma\",]"))
  assert Result.isErr(parse("[\"double extra comma\",,]"))
  assert Result.isErr(parse("[   , \"<-- missing value\"]"))
  assert Result.isErr(parse("[\"Comma after the close\"],"))
  assert Result.isErr(parse("[\"Extra close\"]]"))
  assert Result.isErr(parse("{\"Extra comma\": true,}"))
  assert Result.isErr(
    parse("{\"Extra value after close\": true} \"misplaced quoted value\"")
  )
  assert Result.isErr(parse("{\"Illegal expression\": 1 + 2}"))
  assert Result.isErr(parse("{\"Illegal invocation\": alert()}"))
  assert Result.isErr(parse("{\"Numbers cannot have leading zeroes\": 013}"))
  assert Result.isErr(parse("{\"Numbers cannot be hex\": 0x14}"))
  assert Result.isErr(parse("[\"Illegal backslash escape: \\x15\"]"))
  assert Result.isErr(parse("[\\naked]"))
  assert Result.isErr(parse("[\"Illegal backslash escape: \\017\"]"))
  assert Result.isErr(parse("{\"Missing colon\" null}"))
  assert Result.isErr(parse("{\"Double colon\":: null}"))
  assert Result.isErr(parse("{\"Comma instead of colon\", null}"))
  assert Result.isErr(parse("[\"Colon instead of comma\": false]"))
  assert Result.isErr(parse("[\"Bad value\", truth]"))
  assert Result.isErr(parse("['single quote']"))
  assert Result.isErr(parse("[\"	tab	character	in	string	\"]"))
  assert Result.isErr(parse("[\"tab\\   character\\   in\\  string\\  \"]"))
  assert Result.isErr(parse("[\"line\nbreak\"]"))
  assert Result.isErr(parse("[\"line\\\nbreak\"]"))
  assert Result.isErr(parse("[0e]"))
  assert Result.isErr(parse("[0e+]"))
  assert Result.isErr(parse("[0e+-1]"))
  assert Result.isErr(parse("{\"Comma instead if closing brace\": true,"))
  assert Result.isErr(parse("[\"mismatch\"}"))
  assert Result.isErr(parse("1."))
  assert Result.isErr(parse(".05"))
  assert Result.isErr(parse("-01"))
  assert Result.isErr(parse("01"))
  assert Result.isErr(parse("0e"))
  assert Result.isErr(parse("0e-"))
  assert Result.isErr(parse("0e+"))
  assert Result.isErr(parse("[,]"))
  assert Result.isErr(parse("[1,]"))
  assert Result.isErr(parse("[,1]"))
  assert Result.isErr(parse("[,1,]"))
  assert Result.isErr(parse("\"\\uD834 \\uDD1E\""))
  assert Result.isErr(parse("{}error"))
  assert Result.isErr(parse("[]error"))
  assert Result.isErr(parse("]error"))
  assert Result.isErr(parse("]"))
  assert Result.isErr(parse("}"))
  assert Result.isErr(parse("{"))
  assert Result.isErr(parse("\"k\":\"v\""))
  assert Result.isErr(parse("["))
  assert Result.isErr(parse("{\"k"))
  assert Result.isErr(parse("{\"k\":"))
  assert Result.isErr(parse("{\"k\":\"v"))
  assert Result.isErr(parse("{\"k\":\"v\""))
}
module Parse {
  // Constants
  assert parse("true") == Ok(JSONBoolean(true))
  assert parse("false") == Ok(JSONBoolean(false))
  assert parse("null") == Ok(JSONNull)
  // Numbers
  assert parse("0") == Ok(JSONNumber(0))
  // TODO: Ensure that grain isnt messing this comparison up, take a look at the sign test
  assert parse("-0") == Ok(JSONNumber(-0.0))
  assert parse("3.141592653589793") == Ok(JSONNumber(3.141592653589793))
  assert parse("0.05") == Ok(JSONNumber(0.05))
  // These tests are not testing accuracy, grain uses f64 which these exhaust its just checking that we can handle parsing correctly and equivalently to grain
  assert parse(
    "2.22507385850720113605740979670913197593481954635164564e-308"
  ) ==
    Ok(JSONNumber(2.22507385850720113605740979670913197593481954635164564e-308))
  assert parse(
    "1e999999999999999999999999999999999999999999999999999999999999"
  ) ==
    Ok(
      JSONNumber(1e999999999999999999999999999999999999999999999999999999999999)
    )
  assert parse("42") == Ok(JSONNumber(42))
  assert parse("-42") == Ok(JSONNumber(-42))
  assert parse("5e2") == Ok(JSONNumber(5e2))
  assert parse("5E2") == Ok(JSONNumber(5e2))
  assert parse("5e+2") == Ok(JSONNumber(5e+2))
  assert parse("5E+2") == Ok(JSONNumber(5e+2))
  assert parse("5e-2") == Ok(JSONNumber(5e-2))
  assert parse("5E-2") == Ok(JSONNumber(5e-2))
  assert parse("18446744073709551616") == Ok(JSONNumber(18446744073709551616))
  assert parse("18446744073709551616") == Ok(JSONNumber(18446744073709551616))
  assert parse("1152921504606846976") == Ok(JSONNumber(1152921504606846976))
  assert parse("-10") == Ok(JSONNumber(-10))
  assert parse("-2") == Ok(JSONNumber(-2))
  assert parse("-1") == Ok(JSONNumber(-1))
  assert parse("1") == Ok(JSONNumber(1))
  assert parse("2") == Ok(JSONNumber(2))
  assert parse("10") == Ok(JSONNumber(10))
  assert parse("100") == Ok(JSONNumber(100))
  assert parse("1000") == Ok(JSONNumber(1000))
  assert parse("0.0") == Ok(JSONNumber(0.0))
  assert parse("0.1") == Ok(JSONNumber(0.1))
  assert parse("0.123") == Ok(JSONNumber(0.123))
  assert parse("0.9") == Ok(JSONNumber(0.9))
  assert parse("1.123") == Ok(JSONNumber(1.123))
  assert parse("0e0") == Ok(JSONNumber(0.0))
  assert parse("1e0") == Ok(JSONNumber(1.0))
  assert parse("1e1") == Ok(JSONNumber(10.0))
  assert parse("1E1") == Ok(JSONNumber(10.0))
  assert parse("1e2") == Ok(JSONNumber(100.0))
  assert parse("1e3") == Ok(JSONNumber(1000.0))
  assert parse("-1e2") == Ok(JSONNumber(-100.0))
  assert parse("1e-1") == Ok(JSONNumber(0.1))
  assert parse("1.23e-4") == Ok(JSONNumber(0.000123))
  assert parse("1E200") == Ok(JSONNumber(1E200))
  assert parse("1E-200") == Ok(JSONNumber(1E-200))
  assert parse("85070591730234615884290395931651604481") ==
    Ok(JSONNumber(85070591730234615884290395931651604481))
  assert parse("1.797693134862315708145274237317043567981e+308") ==
    Ok(JSONNumber(1.797693134862315708145274237317043567981e+308))
  assert parse("1.121333") == Ok(JSONNumber(1.121333))
  assert parse("1.001") == Ok(JSONNumber(1.001))
  // Strings
  assert parse("\"\"") == Ok(JSONString(""))
  assert parse("\"\\r\\n\\t\\b\\f\\\\\\/\\\"\"") ==
    Ok(JSONString("\r\n\t\u{8}\u{c}\\/\""))
  assert parse("\"\\u2764\\ufe0f\"") == Ok(JSONString("❤️"))
  assert parse("\"\\uD834\\uDD1E\"") == Ok(JSONString("𝄞"))
  assert parse("\"ASCII Hello world!\"") == Ok(JSONString("ASCII Hello world!"))
  assert parse("\"Unicode こんにちは世界!\"") ==
    Ok(JSONString("Unicode こんにちは世界!"))
  assert parse("\"A \\\"quoted\\\" string\"") ==
    Ok(JSONString("A \"quoted\" string"))
  assert parse("\"\\uD801\\uDC37\"") == Ok(JSONString("𐐷"))
  assert parse("\"🤘🏻\"") == Ok(JSONString("🤘🏻"))
  assert parse("\"🤘🏻\"") == Ok(JSONString("🤘🏻"))
  assert parse("\"🏴󠁧󠁢󠁷󠁬󠁳󠁿\"") ==
    Ok(JSONString("🏴󠁧󠁢󠁷󠁬󠁳󠁿"))
  assert parse(
    "\"\\u6000 \\ud800\\udc82 \\ud83e\\udd18\\ud83c\\udffb \\ud83c\\udff4\\udb40\\udc67\\udb40\\udc62\\udb40\\udc77\\udb40\\udc6c\\udb40\\udc73\\udb40\\udc7f\""
  ) ==
    Ok(JSONString("怀 𐂂 🤘🏻 🏴󠁧󠁢󠁷󠁬󠁳󠁿"))
  // Array
  assert parse("[]") == Ok(JSONArray([]))
  assert parse("[[]]") == Ok(JSONArray([JSONArray([])]))
  assert parse("[  ]") == Ok(JSONArray([]))
  assert parse("[1]") == Ok(JSONArray([JSONNumber(1)]))
  assert parse("[10, \"foo\", true, null]") ==
    Ok(
      JSONArray(
        [JSONNumber(10), JSONString("foo"), JSONBoolean(true), JSONNull]
      )
    )
  // Object
  assert parse("{}") == Ok(JSONObject([]))
  assert parse("
  {
    \"foo\": \"bar\",
    \"num\": 10
  }
  ") ==
    Ok(JSONObject([("foo", JSONString("bar")), ("num", JSONNumber(10))]))
  assert parse(
    "
  {
    \"foo\": \"bar\",
    \"num\": 10,
    \"foo\": 1
  }
  "
  ) ==
    Ok(JSONObject([("foo", JSONNumber(1)), ("num", JSONNumber(10))]))
  // Nesting
  assert parse("{\"foo\": [1, 2, 3]}") ==
    Ok(
      JSONObject(
        [("foo", JSONArray([JSONNumber(1), JSONNumber(2), JSONNumber(3)]))]
      )
    )
  assert parse(
    "
   {
        \"l10n\": [ {
            \"product\": {
                \"inStock\": {
                    \"DE\": \"Lieferung innerhalb von 1-3 Werktagen\"
                }
            }
        } ]
    }"
  ) ==
    Ok(
      JSONObject(
        [
          (
            "l10n",
            JSONArray(
              [
                JSONObject(
                  [
                    (
                      "product",
                      JSONObject(
                        [
                          (
                            "inStock",
                            JSONObject(
                              [
                                (
                                  "DE",
                                  JSONString(
                                    "Lieferung innerhalb von 1-3 Werktagen"
                                  ),
                                ),
                              ]
                            ),
                          ),
                        ]
                      ),
                    ),
                  ]
                ),
              ]
            ),
          ),
        ]
      )
    )
  assert parse("{ \"pi\": 3.14 }") == Ok(JSONObject([("pi", JSONNumber(3.14))]))
  assert parse("[100, 200, false, null, \"foo\"]") ==
    Ok(
      JSONArray(
        [
          JSONNumber(100),
          JSONNumber(200),
          JSONBoolean(false),
          JSONNull,
          JSONString("foo"),
        ]
      )
    )
  assert parse("{ \"Hello\" : \"World!\" }") ==
    Ok(JSONObject([("Hello", JSONString("World!"))]))

  assert parse("{\"a\":\"A\",\"b\":\"B\"}") ==
    Ok(JSONObject([("a", JSONString("A")), ("b", JSONString("B"))]))

  assert parse(
    "{ \"a\" : { \"0\": false, \"1\":true }, \"b\" : [\"A\",\"B\",\"C\"] }"
  ) ==
    Ok(
      JSONObject(
        [
          (
            "a",
            JSONObject([("0", JSONBoolean(false)), ("1", JSONBoolean(true))]),
          ),
          ("b", JSONArray([JSONString("A"), JSONString("B"), JSONString("C")])),
        ]
      )
    )

  assert parse("[1,\"2\",true,false,null]") ==
    Ok(
      JSONArray(
        [
          JSONNumber(1),
          JSONString("2"),
          JSONBoolean(true),
          JSONBoolean(false),
          JSONNull,
        ]
      )
    )

  assert parse("[[[[[[[[[[]]]]]]]]]]") ==
    Ok(
      JSONArray(
        [
          JSONArray(
            [
              JSONArray(
                [
                  JSONArray(
                    [
                      JSONArray(
                        [
                          JSONArray(
                            [
                              JSONArray(
                                [JSONArray([JSONArray([JSONArray([])])])]
                              ),
                            ]
                          ),
                        ]
                      ),
                    ]
                  ),
                ]
              ),
            ]
          ),
        ]
      )
    )

  assert parse(
    "{\"1\":{\"2\":{\"3\":{\"4\":{\"5\":{\"6\":{\"7\":{\"8\":{\"9\":{\"10\":{}}}}}}}}}}}"
  ) ==
    Ok(
      JSONObject(
        [
          (
            "1",
            JSONObject(
              [
                (
                  "2",
                  JSONObject(
                    [
                      (
                        "3",
                        JSONObject(
                          [
                            (
                              "4",
                              JSONObject(
                                [
                                  (
                                    "5",
                                    JSONObject(
                                      [
                                        (
                                          "6",
                                          JSONObject(
                                            [
                                              (
                                                "7",
                                                JSONObject(
                                                  [
                                                    (
                                                      "8",
                                                      JSONObject(
                                                        [
                                                          (
                                                            "9",
                                                            JSONObject(
                                                              [
                                                                (
                                                                  "10",
                                                                  JSONObject(
                                                                    []
                                                                  ),
                                                                ),
                                                              ]
                                                            ),
                                                          ),
                                                        ]
                                                      ),
                                                    ),
                                                  ]
                                                ),
                                              ),
                                            ]
                                          ),
                                        ),
                                      ]
                                    ),
                                  ),
                                ]
                              ),
                            ),
                          ]
                        ),
                      ),
                    ]
                  ),
                ),
              ]
            ),
          ),
        ]
      )
    )

  assert parse("[1,2,3]") ==
    Ok(JSONArray([JSONNumber(1), JSONNumber(2), JSONNumber(3)]))
  assert parse("[\"a\",\"b\",\"c\"]") ==
    Ok(JSONArray([JSONString("a"), JSONString("b"), JSONString("c")]))
  // White spaces
  assert parse("\tnull \r\n") == Ok(JSONNull)
  assert parse("  {\r}") == Ok(JSONObject([]))
  assert parse("[1,\n2\n,3\n]\n") ==
    Ok(JSONArray([JSONNumber(1), JSONNumber(2), JSONNumber(3)]))
  assert parse("{ \"a\" :  \"A\" ,  \"b\" : \"B\" }") ==
    Ok(JSONObject([("a", JSONString("A")), ("b", JSONString("B"))]))
}
